entropy = [1697406007L, 2525636408L, 151170336L, 3664341630L, 2130073521L, 2653241598L, 1955258351L, 3520755028L, 1829121530L, 2811213407L, 812241389L, 267635490L, 3990235371L, 3911491520L, 53504919L, 1884503869L, 874209915L, 3433789876L, 1257464875L, 3500382759L, 178887033L, 4254169039L, 778669158L, 508252231L, 786428080L, 45039006L, 260734027L, 2859116862L, 826943985L, 728489345L, 842335993L, 2027500765L, 2737008337L, 3651009532L, 3552803240L, 2177923953L, 3589113201L, 3267022977L, 496828236L, 1391087379L, 953340126L, 1518214731L, 4253812008L, 841044806L, 3027627883L, 403138633L, 3787656843L, 1805844074L, 4252322823L, 3254836746L, 2269893040L, 541706029L, 2578107573L, 3337111866L, 2757860732L, 3715896742L, 3259612536L, 1486789287L, 506645824L, 2176609271L, 1954812287L, 676930653L, 2500902322L, 3210879272L, 2432297561L, 2312185348L, 1608765188L, 1755583057L, 452258162L, 3744383034L, 2373801089L, 428287817L, 794925218L, 3884047205L, 1412120996L, 1149583564L, 88277764L, 2685046129L, 1367549569L, 3661482098L, 3186543503L, 1913771948L, 2134076419L, 3888750112L, 781083108L, 876001487L, 1801207273L, 231795761L, 258143981L, 1558059159L, 2784297416L, 3165828780L, 689755095L, 173502604L, 2555278634L, 1575240113L, 4277314656L, 3624044658L, 1532327091L, 105375172L, 4155677068L, 1475297542L, 849597696L, 1010326093L, 1430181406L, 3291611647L, 2567511106L, 1943308116L, 2044752641L, 1045292804L, 2043404020L, 3589514822L, 3997756134L, 4067096840L, 2114937146L, 2419825456L, 1711548577L, 258212266L, 3838504996L, 3524737165L, 2660913294L, 128063007L, 452091032L, 1877525648L, 327288068L, 162855474L, 1203836454L, 3157528731L, 348320453L, 660939728L, 720657933L, 2730600703L, 1199806047L, 1332007490L, 4188940165L, 1700612289L, 3210047421L, 2110889504L, 3217122278L, 1624641077L, 3771845310L, 1022178605L, 2753212833L, 3308692867L, 3973548827L, 3953886665L, 3688821863L, 3657511566L, 690914357L, 448129893L, 3047601265L, 604710337L, 980279746L, 3082379692L, 921685142L, 1954955137L, 2628848047L, 1902875770L, 542979870L, 165611409L, 3784262956L, 3091395331L, 3039050860L, 1885049750L, 29892002L, 2775144481L, 980015694L, 961588616L, 3877117789L, 2412383122L, 50120825L, 3935433534L, 3299677477L, 4064410118L, 4216177980L, 1518115942L, 301167917L, 2741531406L, 1031745645L, 21941752L, 1022808637L, 2544541050L, 4173068169L, 2394203374L, 526066173L, 3120924115L, 1033637443L, 2536598660L, 3557333989L, 2264952690L, 1763213311L, 225604781L, 1967633391L, 2170904877L, 2695589777L, 2175232713L, 1612661396L, 1221206129L, 4115683452L, 1545939632L, 3387597267L, 1370484297L, 237214469L, 3952360514L, 1507533796L, 3550800724L, 1237043616L, 2119465936L, 2766617614L, 1183568976L, 431100729L, 2945475251L, 337731219L, 2849865331L, 1277016160L, 3173795313L, 1240308603L, 151278499L, 3933128266L, 576847413L, 523633717L, 3888686671L, 444955688L, 3177308082L, 2589311625L, 2924650932L, 1117139395L, 716549653L, 3431831629L, 2880378708L, 3594165509L, 273251575L, 1866495585L, 833505752L, 890948365L, 2484643781L, 2842501042L, 1647923223L, 2794190330L, 1412670684L, 3888189925L, 2731851027L, 3524666825L, 2532651455L, 166903174L, 1924596912L, 620438281L, 4115864612L, 952864143L, 313375066L, 2850574203L, 3979415971L, 3740671350L, 772749781L, 2359182929L, 1494074355L, 2320253420L, 2110221213L, 1150632260L, 1842077133L, 772381037L, 4260060956L, 1936754055L, 3494420777L, 3678920130L, 1987171249L, 1029332763L, 3298158523L, 2486575970L, 3046621309L, 137144576L, 3684220004L, 1386219681L, 900233830L, 1722713751L, 895041072L, 2414336964L, 2816559481L, 2326347170L, 1415322035L, 4018567904L, 2969872165L, 1101414862L, 2309727183L, 189412391L, 3902694331L, 813679723L, 2224262994L, 4140786284L, 2014818691L, 183140368L, 1536819526L, 2316012848L, 4225615091L, 3137312144L, 3144228510L, 3238636312L, 3939408618L, 1935543607L, 2055995915L, 2268400525L, 1209521953L, 3525522517L, 3078222527L, 2095409802L, 2860271338L, 2299958403L, 3173599362L, 2806692268L, 1129300197L, 1862081802L, 3293977181L, 1441524315L, 3872889534L, 3988613594L, 2277275542L, 3591282071L, 3354520879L, 1336641521L, 3541653641L, 1387771411L, 3566014283L, 3212538115L, 2872074734L, 2234812167L, 3190625596L, 2134730207L, 1329822736L, 3153992280L, 2366675611L, 1926076045L, 3965397309L, 422333841L, 3487905144L, 1157585005L, 3456682587L, 999823656L, 1202170490L, 2482204181L, 3416437109L, 2280736779L, 2612030632L, 1120943717L, 674406831L, 1694171744L, 1211499946L, 367479540L, 397644859L, 1875717080L, 423505918L, 2885380789L, 1103987560L, 3970955802L, 1278911835L, 1984257065L, 88919992L, 2519161684L, 493599529L, 4196201696L, 3252943673L, 2272632477L, 1186721932L, 3148686148L, 1606876709L, 2038071421L, 3559292539L, 4138712326L, 827032315L, 948391729L, 1083752592L, 1638879892L, 2915771498L, 650146168L, 1673095803L, 1455463811L, 3453714779L, 3040618721L, 2169532886L, 3840661631L, 1598555905L, 2336580712L, 1595487173L, 2433820081L, 3643704092L, 396566330L, 1182723487L, 1005143822L, 2487775094L, 134914258L, 3788648312L, 2507819961L, 289119815L, 3709299275L, 2529519037L, 1923647036L, 62299865L, 1974747784L, 407919501L, 2462047330L, 1116951085L, 3612748094L, 249012490L, 682959097L, 2728650312L, 1032826027L, 4061060695L, 801358269L, 1087080440L, 3538203301L, 4094593404L, 1204773853L, 898232967L, 1118275715L, 1373458263L, 3260134337L, 2927565731L, 2590393729L, 3376268739L, 1861190698L, 1573797631L, 62877237L, 1174367101L, 1099319378L, 3369107121L, 2025764075L, 2562850739L, 3053342522L, 3912774716L, 1817687960L, 3838278200L, 2319595013L, 1666663567L, 3091534454L, 468472048L, 2658174484L, 797481687L, 821858633L, 3204745444L, 1346925422L, 4104716431L, 2224192227L, 2205020498L, 3030461184L, 3889921158L, 3517618156L, 832881957L, 109079567L, 3334291213L, 268798403L, 1906541983L, 3772142637L, 2110388636L, 3204331920L, 2386752142L, 1286787853L, 2038448781L, 777381762L, 3566768529L, 2888111941L, 954010200L, 3421574728L, 1616497996L, 790208383L, 1235647934L, 240006563L, 369381169L, 3883565624L, 3300649257L, 4041632648L, 128539362L, 2659414948L, 2931990162L, 3076658945L, 3556175990L, 1238200386L, 2053367869L, 3968221558L, 2262091230L, 879853435L, 499312870L, 1649084803L, 2919027355L, 679297352L, 1781398981L, 3971927138L, 2518427001L, 690629218L, 682294218L, 1446820726L, 2011848006L, 301183838L, 822353637L, 3861450840L, 1205941400L, 1803140587L, 3343097833L, 1180897687L, 3506702604L, 1507672377L, 1462999152L, 2443438574L, 4124165490L, 3044170269L, 1422641375L, 4143476310L, 1716189109L, 82885464L, 2274581554L, 1090198360L, 2022850045L, 1700616523L, 2226728472L, 3667353668L, 826587776L, 1359782817L, 301114520L, 2212762125L, 1593578388L, 4204279393L, 697330550L, 2511807132L, 797236486L, 2725008722L, 4245462866L, 350397758L, 3563407569L, 102001761L, 586540676L, 121817343L, 2883735924L, 3523663376L, 1230858012L, 128874884L, 1222611108L, 1013427235L, 26929300L, 167559573L, 1320681958L, 558805777L, 2399354235L, 1345933823L, 4133736958L, 3191949473L, 3101125206L, 727811093L, 2390256027L, 2633125959L, 2013362541L, 3045419185L, 2958183800L, 483381523L, 4028324352L, 1758404362L, 2510656650L, 1907201337L, 1590595888L, 1093949574L, 2026291827L, 3278160682L, 3288532419L, 1778831222L, 4282666595L, 3477611597L, 209955951L, 1212284197L, 1938414671L, 2685769111L, 3813483069L, 1327769825L, 3179501835L, 2420422838L, 573708223L, 1689336738L, 3587971094L, 4065461529L, 3746570680L, 893948940L, 2560373954L, 299006174L, 2940482188L, 2397172348L, 39863535L, 728313157L, 1789519561L, 200779093L, 1258843929L, 1825977226L, 1936919508L, 2192608486L, 4147520767L, 21595189L, 1742940136L, 3884904442L, 2106358602L, 2787612401L, 3033028177L, 1694099313L, 2771958099L, 277490614L, 2971721792L, 2229347924L, 741546058L, 4227409660L, 1293808317L, 1556545025L, 4105046993L, 4107006642L, 2003964740L, 1764667803L, 2065061957L, 2421420137L, 1176148781L, 4062450170L, 3186939162L, 4055566146L, 3089000115L, 2759399345L, 647972409L, 2763376164L, 1485423776L, 3781544577L, 3772821140L, 3099558171L, 2033663510L, 4169044738L, 251863540L, 236127030L, 766915200L, 169851658L, 493444520L, 2416531386L, 1440784685L, 3495326751L, 1252027358L, 1667402676L, 3237141103L, 1016900060L, 4095282757L, 4130356157L, 3928844383L, 862443318L, 88795589L, 1256051788L, 3739949250L, 1259904150L, 3603829980L, 2462131935L, 44836731L, 742359767L, 1450110837L, 1031564040L, 2992900357L, 1720737610L, 444344745L, 3577132682L, 1423829951L, 2546471359L, 222160246L, 1043057243L, 809778618L, 433052902L, 3486828200L, 1950869936L, 3468700794L, 3827005952L, 1809600622L, 1205531188L, 3913435237L, 611035902L, 2101037970L, 3764255471L, 1910212500L, 418289842L, 3175773957L, 1247888172L, 2727874690L, 1969900964L, 408452213L, 3956016232L, 1226272598L, 3029834363L, 2334701197L, 410524479L, 2714174080L, 2826042375L, 1039286987L, 273018447L, 1886991120L, 1110085281L, 1693485490L, 2389016891L, 2993634444L, 2618247691L, 2543931489L, 1727011119L, 2795847276L, 1014014998L, 3454022114L, 616123834L, 366575308L]

L = 32
N = 624
M = 397
UM = 2**31
LM = UM - 1

def unBitshiftRightXor(value, shift, mask):
        i = 0
        result = 0
        shiftmask = 2**shift - 1
        while (i * shift) < L:
                partmask = (shiftmask << (L - shift)) >> (shift * i)
                part = value & partmask
                value ^= (part >> shift) & mask
                result |= part
                i += 1
        return result

def BitshiftRightXor(value, shift, mask):
        pmask = (value >> shift) & mask
        result = value ^ pmask
        return result

def unBitshiftLeftXor(value, shift, mask):
        i = 0
        result = 0
        shiftmask = 2**shift - 1
        while (i * shift) < L:
                partmask = shiftmask << (shift * i)
                part = value & partmask
                value ^= (part << shift) & mask
                result |= part
                i += 1
        return result


def BitshiftLeftXor(value, shift, mask):
        pmask = (value << shift) & mask
        result = value ^ pmask
        return result
def untransform(value):
        value = unBitshiftRightXor(value, 18, 0xffffffff)
        value = unBitshiftLeftXor(value,  15, 0xefc60000)
        value = unBitshiftLeftXor(value,   7, 0x9d2c5680)
        value = unBitshiftRightXor(value, 11, 0xffffffff)
        return value

def MTwister(sv, ndx):
        ndx = ndx % N
        y = (sv[ndx] & UM) | (sv[(ndx + 1) % N] & LM)
        sv[ndx] = sv[(ndx + M) % N] ^ (y >> 1)
        if y & 0x1:
                sv[ndx] ^= 0x9908b0df
        rn = sv[ndx]
        rn = BitshiftRightXor(rn, 11, 0xffffffff)
        rn = BitshiftLeftXor(rn,   7, 0x9d2c5680)
        rn = BitshiftLeftXor(rn,  15, 0xefc60000)
        rn = BitshiftRightXor(rn, 18, 0xffffffff)
        return rn

def getrandbits(sv, ndx, bits):
        bytes = ((bits - 1) / 32 + 1) * 4
        mask = 0xff
        r = []
        result = 0
        for i in range(0, bytes, 4):
                random = MTwister(sv, ndx + (i / 4))
                if bits < 32:
                        random = random >> (32 - bits)
                r.append( random        & mask)
                r.append((random >>  8) & mask)
                r.append((random >> 16) & mask)
                r.append((random >> 24) & mask)
                bits = bits - 32
        j = 0
        for b in r:
                result = (b << (8 * j)) | result
                j += 1
        return result, (i / 4) + 1

# getstatebits works OK when bits % 32 == 0
def getstatebits(sv, value, bits):
        bytes = ((bits - 1) / 32 + 1) * 4
        mask = 0xff
        r = []
        for i in range(0, bytes, 4):
                if bits < 32:
                        value = value << (32 - bits)
                j = 32 * (i/4)
                r.append((value >>  j)       & mask)
                r.append((value >> (j +  8)) & mask)
                r.append((value >> (j + 16)) & mask)
                r.append((value >> (j + 24)) & mask)
                bits = bits - 32
                result = 0
                j = 0
                for b in r:
                        result = (b << (8 * j)) | result
                        j += 1
                sv.append(untransform(result))
                del r[:]
        return sv #(i / 4) + 1


cur_state = []
for ent in entropy:
    cur_state.append(untransform(long(ent)))
print cur_state
